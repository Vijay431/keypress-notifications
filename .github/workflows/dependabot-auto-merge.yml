name: 🤖 Dependabot Auto-Merge

on:
    pull_request:
        types: [opened, synchronize, reopened, ready_for_review]

permissions:
    contents: write
    pull-requests: write
    checks: read

jobs:
    dependabot-validation:
        name: 🔍 Dependabot PR Validation
        runs-on: ubuntu-latest
        if: github.actor == 'dependabot[bot]'

        permissions:
            contents: read
            pull-requests: read

        outputs:
            should-automerge: ${{ steps.check-automerge.outputs.should-automerge }}
            update-type: ${{ steps.check-automerge.outputs.update-type }}
            package-ecosystem: ${{ steps.check-automerge.outputs.package-ecosystem }}

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  fetch-depth: 2

            - name: 🔍 Parse Dependabot metadata
              id: dependabot-metadata
              uses: dependabot/fetch-metadata@v2
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}

            - name: 📊 Analyze update safety
              id: check-automerge
              run: |
                  echo "🔍 Analyzing Dependabot update..."
                  echo "Package: ${{ steps.dependabot-metadata.outputs.package-ecosystem }}"
                  echo "Update type: ${{ steps.dependabot-metadata.outputs.update-type }}"
                  echo "Dependency names: ${{ steps.dependabot-metadata.outputs.dependency-names }}"

                  # Determine if we should auto-merge based on update type and ecosystem
                  SHOULD_AUTOMERGE="false"
                  UPDATE_TYPE="${{ steps.dependabot-metadata.outputs.update-type }}"
                  ECOSYSTEM="${{ steps.dependabot-metadata.outputs.package-ecosystem }}"

                  # Auto-merge rules:
                  # 1. Patch updates are generally safe
                  # 2. Minor updates for devDependencies
                  # 3. Security updates (any level)

                  if [ "$UPDATE_TYPE" = "version-update:semver-patch" ]; then
                    echo "✅ Patch update detected - safe to auto-merge"
                    SHOULD_AUTOMERGE="true"
                  elif [ "$UPDATE_TYPE" = "version-update:semver-minor" ]; then
                    # Check if it's a dev dependency
                    DEPENDENCY_NAMES="${{ steps.dependabot-metadata.outputs.dependency-names }}"
                    
                    # Get current package.json to check if dependencies are dev-only
                    DEV_DEPS=$(cat package.json | jq -r '.devDependencies // {} | keys[]' | tr '\n' ' ')
                    
                    echo "Dev dependencies: $DEV_DEPS"
                    echo "Updated dependencies: $DEPENDENCY_NAMES"
                    
                    # Check if all updated dependencies are dev dependencies
                    ALL_DEV="true"
                    for dep in $DEPENDENCY_NAMES; do
                      if ! echo "$DEV_DEPS" | grep -q "$dep"; then
                        echo "⚠️ $dep is not a dev dependency"
                        ALL_DEV="false"
                        break
                      fi
                    done
                    
                    if [ "$ALL_DEV" = "true" ]; then
                      echo "✅ Minor update to dev dependencies only - safe to auto-merge"
                      SHOULD_AUTOMERGE="true"
                    else
                      echo "⚠️ Minor update includes production dependencies - manual review needed"
                    fi
                  elif [ "$UPDATE_TYPE" = "version-update:semver-major" ]; then
                    echo "❌ Major update detected - requires manual review"
                  else
                    echo "ℹ️ Unknown update type: $UPDATE_TYPE"
                  fi

                  # Always auto-merge security updates (override other rules)
                  if echo "${{ github.event.pull_request.title }}" | grep -i "security\|vulnerability\|CVE"; then
                    echo "🔒 Security update detected - overriding auto-merge decision"
                    SHOULD_AUTOMERGE="true"
                  fi

                  echo "should-automerge=$SHOULD_AUTOMERGE" >> $GITHUB_OUTPUT
                  echo "update-type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
                  echo "package-ecosystem=$ECOSYSTEM" >> $GITHUB_OUTPUT

                  echo "📊 Final decision: Auto-merge = $SHOULD_AUTOMERGE"

    quality-checks:
        name: 🧪 Quality Assurance
        needs: dependabot-validation
        if: github.actor == 'dependabot[bot]' && needs.dependabot-validation.outputs.should-automerge == 'true'
        runs-on: ubuntu-latest

        permissions:
            contents: read

        outputs:
            tests-passed: ${{ steps.test-results.outputs.passed }}
            build-successful: ${{ steps.build-results.outputs.successful }}

        steps:
            - name: 📥 Checkout PR code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}

            - name: 📦 Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: 🟢 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: 📚 Install dependencies
              run: pnpm install --frozen-lockfile

            - name: 🏗️ Build project
              id: build
              run: |
                  pnpm run compile
                  echo "Build completed successfully"
              continue-on-error: true

            - name: 🔍 Type checking
              if: steps.build.outcome == 'success'
              run: pnpm run check-types
              continue-on-error: true
              id: typecheck

            - name: 🕵️ Lint code
              if: steps.build.outcome == 'success'
              run: pnpm run lint
              continue-on-error: true
              id: lint

            - name: 🧪 Run tests
              if: steps.build.outcome == 'success'
              id: test
              run: |
                  xvfb-run -a pnpm test
              continue-on-error: true
              env:
                  NODE_ENV: test

            - name: 📦 Package extension
              if: steps.build.outcome == 'success'
              run: pnpm run package
              continue-on-error: true
              id: package

            - name: 📊 Summarize quality checks
              id: quality-summary
              run: |
                  echo "📊 Quality Check Results:"
                  echo "========================"
                  echo "🏗️ Build: ${{ steps.build.outcome }}"
                  echo "🔍 Type Check: ${{ steps.typecheck.outcome }}"
                  echo "🕵️ Lint: ${{ steps.lint.outcome }}"
                  echo "🧪 Tests: ${{ steps.test.outcome }}"
                  echo "📦 Package: ${{ steps.package.outcome }}"

                  # Determine if all critical checks passed
                  CRITICAL_PASSED="true"
                  if [ "${{ steps.build.outcome }}" != "success" ] || \
                     [ "${{ steps.test.outcome }}" != "success" ]; then
                    CRITICAL_PASSED="false"
                  fi

                  echo "🎯 Critical checks passed: $CRITICAL_PASSED"

            - name: 📋 Set outputs
              id: test-results
              run: |
                  if [ "${{ steps.test.outcome }}" = "success" ]; then
                    echo "passed=true" >> $GITHUB_OUTPUT
                  else
                    echo "passed=false" >> $GITHUB_OUTPUT
                  fi

            - name: 🏗️ Set build outputs
              id: build-results
              run: |
                  if [ "${{ steps.build.outcome }}" = "success" ]; then
                    echo "successful=true" >> $GITHUB_OUTPUT
                  else
                    echo "successful=false" >> $GITHUB_OUTPUT
                  fi

    auto-merge:
        name: 🚀 Auto-Merge Dependabot PR
        needs: [dependabot-validation, quality-checks]
        if: |
            github.actor == 'dependabot[bot]' && 
            needs.dependabot-validation.outputs.should-automerge == 'true' &&
            needs.quality-checks.outputs.tests-passed == 'true' &&
            needs.quality-checks.outputs.build-successful == 'true'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write

        steps:
            - name: 🎯 Wait for status checks
              uses: lewagon/wait-on-check-action@v1.3.3
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
                  check-name: '🧪 Test (Node 20 on ubuntu-latest)'
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  wait-interval: 30
                  allowed-conclusions: success,neutral,skipped
              continue-on-error: true

            - name: ✅ Approve Dependabot PR
              uses: hmarr/auto-approve-action@v4
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}

            - name: 🔄 Enable auto-merge
              uses: peter-evans/enable-pull-request-automerge@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  pull-request-number: ${{ github.event.pull_request.number }}
                  merge-method: squash

            - name: 📝 Add merge comment
              uses: actions/github-script@v7
              with:
                  script: |
                      const updateType = '${{ needs.dependabot-validation.outputs.update-type }}';
                      const ecosystem = '${{ needs.dependabot-validation.outputs.package-ecosystem }}';

                      let emoji = '📦';
                      if (updateType.includes('patch')) emoji = '🩹';
                      else if (updateType.includes('minor')) emoji = '✨';
                      else if (updateType.includes('major')) emoji = '🚀';

                      const comment = `${emoji} **Auto-merging Dependabot update**

                      **Update Details:**
                      - 📋 **Type:** ${updateType}
                      - 🔧 **Ecosystem:** ${ecosystem}
                      - ✅ **Quality Checks:** All passed
                      - 🤖 **Auto-merge:** Enabled (squash merge)

                      This update has been automatically validated and approved because:
                      - ✅ It's a safe update type (patch/minor dev dependencies/security)
                      - ✅ All tests pass
                      - ✅ Build is successful
                      - ✅ No breaking changes detected

                      The PR will be automatically merged once all required status checks pass.

                      ---
                      🤖 *This action was performed automatically by the Dependabot Auto-Merge workflow.*`;

                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });

    manual-review:
        name: 📋 Manual Review Required
        needs: [dependabot-validation, quality-checks]
        if: |
            always() && 
            github.actor == 'dependabot[bot]' && 
            (needs.dependabot-validation.outputs.should-automerge != 'true' ||
             needs.quality-checks.outputs.tests-passed != 'true' ||
             needs.quality-checks.outputs.build-successful != 'true')
        runs-on: ubuntu-latest
        permissions:
            pull-requests: write

        steps:
            - name: 📝 Add manual review comment
              uses: actions/github-script@v7
              with:
                  script: |
                      const shouldAutomerge = '${{ needs.dependabot-validation.outputs.should-automerge }}';
                      const updateType = '${{ needs.dependabot-validation.outputs.update-type }}';
                      const testsPassed = '${{ needs.quality-checks.outputs.tests-passed }}';
                      const buildSuccessful = '${{ needs.quality-checks.outputs.build-successful }}';

                      let reason = '';
                      let emoji = '⚠️';

                      if (shouldAutomerge !== 'true') {
                        reason = `This ${updateType} requires manual review due to potentially breaking changes.`;
                        if (updateType.includes('major')) {
                          emoji = '🚨';
                          reason = 'This is a major version update that may contain breaking changes.';
                        }
                      } else if (testsPassed !== 'true') {
                        emoji = '❌';
                        reason = 'Tests failed - please review the test results before merging.';
                      } else if (buildSuccessful !== 'true') {
                        emoji = '🏗️';
                        reason = 'Build failed - please review the build logs before merging.';
                      }

                      const comment = `${emoji} **Manual review required for this Dependabot update**

                      **Reason:** ${reason}

                      **Update Details:**
                      - 📋 **Type:** ${updateType}
                      - 🔧 **Ecosystem:** ${{ needs.dependabot-validation.outputs.package-ecosystem }}
                      - 🧪 **Tests:** ${testsPassed === 'true' ? '✅ Passed' : '❌ Failed'}
                      - 🏗️ **Build:** ${buildSuccessful === 'true' ? '✅ Successful' : '❌ Failed'}

                      **Next Steps:**
                      1. 📖 Review the changes and changelogs
                      2. 🧪 Run additional tests if needed
                      3. ✅ Approve and merge when satisfied

                      ---
                      🤖 *This comment was generated by the Dependabot Auto-Merge workflow.*`;

                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: comment
                      });

                      // Add labels for better organization
                      await github.rest.issues.addLabels({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        labels: ['dependencies', 'manual-review-required']
                      });

    summary:
        name: 📊 Dependabot Summary
        needs: [dependabot-validation, quality-checks, auto-merge, manual-review]
        if: always() && github.actor == 'dependabot[bot]'
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: 📊 Workflow summary
              run: |
                  echo "🤖 Dependabot Auto-Merge Workflow Summary"
                  echo "========================================"
                  echo "📋 PR: #${{ github.event.pull_request.number }}"
                  echo "🔧 Update Type: ${{ needs.dependabot-validation.outputs.update-type }}"
                  echo "📦 Ecosystem: ${{ needs.dependabot-validation.outputs.package-ecosystem }}"
                  echo "🎯 Should Auto-merge: ${{ needs.dependabot-validation.outputs.should-automerge }}"
                  echo "🧪 Tests Passed: ${{ needs.quality-checks.outputs.tests-passed }}"
                  echo "🏗️ Build Successful: ${{ needs.quality-checks.outputs.build-successful }}"
                  echo ""

                  if [ "${{ needs.auto-merge.result }}" = "success" ]; then
                    echo "✅ Result: Auto-merged successfully!"
                  elif [ "${{ needs.manual-review.result }}" = "success" ]; then
                    echo "📋 Result: Manual review required"
                  else
                    echo "❓ Result: Workflow completed with mixed results"
                  fi
