name: 🚀 Release & Publish

on:
    push:
        branches: [master]
        tags: ['v*']
    workflow_dispatch:
        inputs:
            release_type:
                description: 'Release type'
                required: true
                default: 'patch'
                type: choice
                options:
                    - patch
                    - minor
                    - major
            skip_tests:
                description: 'Skip tests (not recommended)'
                required: false
                default: false
                type: boolean

permissions:
    contents: write
    packages: write
    id-token: write

jobs:
    pre-release-checks:
        name: 🔍 Pre-Release Validation
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')

        permissions:
            contents: read

        outputs:
            should_release: ${{ steps.version_check.outputs.should_release }}
            new_version: ${{ steps.version_check.outputs.new_version }}

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: 📦 Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: 🟢 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: 📚 Install dependencies
              run: pnpm install --frozen-lockfile

            - name: 🏗️ Build project
              run: pnpm run package

            - name: 🧪 Run full test suite
              if: ${{ !inputs.skip_tests }}
              run: |
                  xvfb-run -a pnpm test
              env:
                  NODE_ENV: test

            - name: 📋 Version validation
              id: version_check
              run: |
                  current_version=$(node -p "require('./package.json').version")
                  echo "Current version: $current_version"

                  # Check if this is a tag push
                  if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
                    tag_version="${{ github.ref }}"
                    tag_version="${tag_version#refs/tags/v}"
                    echo "Tag version: $tag_version"
                    
                    if [ "$current_version" = "$tag_version" ]; then
                      echo "should_release=true" >> $GITHUB_OUTPUT
                      echo "new_version=$current_version" >> $GITHUB_OUTPUT
                    else
                      echo "❌ Version mismatch: package.json ($current_version) vs tag ($tag_version)"
                      exit 1
                    fi
                  else
                    # For manual dispatch, check if we should bump version
                    if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                      echo "should_release=true" >> $GITHUB_OUTPUT
                      echo "new_version=$current_version" >> $GITHUB_OUTPUT
                    else
                      # Check if version was bumped in recent commits
                      git_version_changes=$(git log --oneline -n 5 --grep="bump version\|version bump\|release" || echo "")
                      if [ -n "$git_version_changes" ]; then
                        echo "should_release=true" >> $GITHUB_OUTPUT
                        echo "new_version=$current_version" >> $GITHUB_OUTPUT
                      else
                        echo "should_release=false" >> $GITHUB_OUTPUT
                        echo "No version bump detected in recent commits"
                      fi
                    fi
                  fi

    release:
        name: 📦 Build & Release
        needs: pre-release-checks
        if: needs.pre-release-checks.outputs.should_release == 'true'
        runs-on: ubuntu-latest

        environment: release

        permissions:
            contents: write
            packages: write
            id-token: write

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: 📦 Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: 🟢 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: 📚 Install dependencies
              run: pnpm install --frozen-lockfile

            - name: 🔢 Version bump (if manual dispatch)
              if: github.event_name == 'workflow_dispatch'
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

                  npm version ${{ inputs.release_type }} --no-git-tag-version
                  new_version=$(node -p "require('./package.json').version")

                  git add package.json
                  git commit -m "🔖 Bump version to $new_version"
                  git tag "v$new_version"
                  git push origin master --tags

            - name: 🏗️ Build for production
              run: pnpm run package

            - name: 📋 Generate changelog
              id: changelog
              run: |
                  current_version="${{ needs.pre-release-checks.outputs.new_version }}"

                  # Get the previous tag
                  previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

                  if [ -n "$previous_tag" ]; then
                    echo "## 🎉 What's New in v$current_version" > RELEASE_NOTES.md
                    echo "" >> RELEASE_NOTES.md
                    
                    # Get commits since last tag
                    git log "$previous_tag..HEAD" --pretty=format:"- %s (%h)" --no-merges >> RELEASE_NOTES.md
                  else
                    echo "## 🎉 Initial Release v$current_version" > RELEASE_NOTES.md
                    echo "" >> RELEASE_NOTES.md
                    echo "- 🎯 First release of Keypress Notifications extension" >> RELEASE_NOTES.md
                  fi

                  echo "" >> RELEASE_NOTES.md
                  echo "---" >> RELEASE_NOTES.md
                  echo "📦 **Installation**: Install from [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=VijayGangatharan.keypress-notifications)" >> RELEASE_NOTES.md
                  echo "🐛 **Issues**: Report bugs at [GitHub Issues](https://github.com/Vijay431/vscode-keypress_snackbar_notification-extension/issues)" >> RELEASE_NOTES.md
                  echo "💡 **Features**: Request features at [GitHub Discussions](https://github.com/Vijay431/vscode-keypress_snackbar_notification-extension/discussions)" >> RELEASE_NOTES.md

                  cat RELEASE_NOTES.md

    publish-marketplace:
        name: 🌐 Publish to VS Code Marketplace
        needs: [pre-release-checks, release]
        if: needs.pre-release-checks.outputs.should_release == 'true'
        runs-on: ubuntu-latest

        environment: marketplace

        permissions:
            contents: read

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  ref: master

            - name: 📦 Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: 🟢 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'pnpm'

            - name: 📚 Install dependencies
              run: pnpm install --frozen-lockfile

            - name: 🏗️ Build for marketplace
              run: pnpm run package

            - name: 📤 Package extension
              run: |
                  npx vsce package --no-dependencies
                  ls -la *.vsix

            - name: 🌐 Publish to marketplace
              env:
                  VSCE_PAT: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
              run: |
                  echo "📡 Publishing to VS Code Marketplace..."
                  npx vsce publish --no-dependencies --packagePath *.vsix
                  echo "✅ Successfully published to marketplace!"

            - name: 📤 Upload VSIX artifact
              uses: actions/upload-artifact@v4
              with:
                  name: extension-vsix-v${{ needs.pre-release-checks.outputs.new_version }}
                  path: '*.vsix'
                  retention-days: 90

    github-release:
        name: 🏷️ Create GitHub Release
        needs: [pre-release-checks, release, publish-marketplace]
        if: always() && needs.pre-release-checks.outputs.should_release == 'true' && needs.release.result == 'success'
        runs-on: ubuntu-latest

        permissions:
            contents: write

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4
              with:
                  ref: master
                  fetch-depth: 0

            - name: 📋 Download release artifacts
              uses: actions/download-artifact@v4
              with:
                  name: extension-vsix-v${{ needs.pre-release-checks.outputs.new_version }}

            - name: 🏷️ Create GitHub release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ needs.pre-release-checks.outputs.new_version }}
                  name: '🎉 Keypress Notifications v${{ needs.pre-release-checks.outputs.new_version }}'
                  body_path: RELEASE_NOTES.md
                  files: |
                      *.vsix
                  draft: false
                  prerelease: false
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    post-release:
        name: 📬 Post-Release Actions
        needs: [pre-release-checks, github-release, publish-marketplace]
        if: always() && needs.pre-release-checks.outputs.should_release == 'true'
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: 📊 Release Summary
              run: |
                  echo "🎉 Release Summary for v${{ needs.pre-release-checks.outputs.new_version }}"
                  echo "================================"
                  echo "✅ Build: ${{ needs.release.result }}"
                  echo "🌐 Marketplace: ${{ needs.publish-marketplace.result }}"
                  echo "🏷️ GitHub Release: ${{ needs.github-release.result }}"
                  echo ""
                  if [ "${{ needs.publish-marketplace.result }}" = "success" ]; then
                    echo "🎯 Extension published successfully to VS Code Marketplace!"
                    echo "📦 Users can now install via: code --install-extension VijayGangatharan.keypress-notifications"
                  else
                    echo "❌ Marketplace publication failed - please check logs"
                  fi
                  echo ""
                  echo "🔗 Useful Links:"
                  echo "📦 Marketplace: https://marketplace.visualstudio.com/items?itemName=VijayGangatharan.keypress-notifications"
                  echo "🏷️ GitHub Release: https://github.com/Vijay431/vscode-keypress_snackbar_notification-extension/releases/tag/v${{ needs.pre-release-checks.outputs.new_version }}"
