name: 🧹 Stale Issues & PRs Cleanup

on:
    schedule:
        # Run daily at 2:30 AM UTC
        - cron: '30 2 * * *'
    workflow_dispatch:
        inputs:
            dry_run:
                description: 'Dry run (only log what would be done)'
                required: false
                default: true
                type: boolean

permissions:
    issues: write
    pull-requests: write

jobs:
    stale:
        name: 🧹 Clean Stale Items
        runs-on: ubuntu-latest

        permissions:
            issues: write
            pull-requests: write

        steps:
            - name: 🔍 Process stale issues and PRs
              uses: actions/stale@v9
              with:
                  # 🎛️ General Configuration
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

                  # ⏰ Timing Configuration
                  days-before-stale: 60 # Mark as stale after 60 days
                  days-before-close: 14 # Close after 14 days of being stale
                  days-before-pr-stale: 30 # PRs become stale faster (30 days)
                  days-before-pr-close: 7 # Close PRs after 7 days of being stale

                  # 🏷️ Labels
                  stale-issue-label: 'stale'
                  stale-pr-label: 'stale'
                  close-issue-label: 'auto-closed'
                  close-pr-label: 'auto-closed'

                  # 📝 Messages for Issues
                  stale-issue-message: |
                      👋 **Hey there!** 

                      This issue has been automatically marked as **stale** because it hasn't had any activity for 60 days. 

                      🤔 **Is this still relevant?**
                      - ✅ **Yes**: Add a comment to keep it open
                      - ❌ **No**: This issue will be automatically closed in 14 days

                      We really appreciate your contribution to the **Keypress Notifications** project! 🎯

                      ---
                      🤖 *This is an automated message. If you believe this issue was marked as stale incorrectly, please comment below.*

                  close-issue-message: |
                      🗑️ **Automatically closing this issue** because it has been stale for 14 days with no activity.

                      **Don't worry!** 😊 You can always:
                      - 🔄 **Reopen** this issue if it's still relevant
                      - 💬 **Comment** to provide additional context
                      - 🆕 **Create a new issue** if this represents a different problem

                      Thanks for your interest in **Keypress Notifications**! 🎯

                      ---
                      🤖 *This issue was automatically closed by the stale workflow.*

                  # 📝 Messages for Pull Requests
                  stale-pr-message: |
                      🔄 **This pull request has been marked as stale** because it hasn't had any activity for 30 days.

                      🚀 **To keep this PR active:**
                      - 📝 Add a comment explaining the current status
                      - 🔧 Push new commits if needed
                      - 📋 Update the description if requirements changed

                      **This PR will be automatically closed in 7 days** if no activity occurs.

                      We appreciate your contribution to **Keypress Notifications**! 🎯

                      ---
                      🤖 *This is an automated message. Reply with any questions or updates.*

                  close-pr-message: |
                      🗑️ **Automatically closing this pull request** due to inactivity.

                      **This doesn't mean your work isn't valued!** 💖 You can:
                      - 🔄 **Reopen** this PR if you want to continue
                      - 🆕 **Create a new PR** with updated changes
                      - 💬 **Comment** if you need help getting unstuck

                      Thanks for contributing to **Keypress Notifications**! 🎯

                      ---
                      🤖 *This PR was automatically closed by the stale workflow.*

                  # 🎯 Filtering & Targeting
                  remove-stale-when-updated: true
                  remove-issue-stale-when-updated: true
                  remove-pr-stale-when-updated: true

                  # 🏷️ Exempt labels (issues/PRs with these labels won't become stale)
                  exempt-issue-labels: |
                      pinned
                      security
                      enhancement
                      good-first-issue
                      help-wanted
                      bug
                      critical
                      breaking-change
                      feature-request
                      documentation
                      wontfix
                      duplicate
                      invalid
                      on-hold
                      needs-investigation

                  exempt-pr-labels: |
                      pinned
                      security
                      work-in-progress
                      wip
                      do-not-merge
                      breaking-change
                      critical
                      on-hold
                      needs-review

                  # 🎯 Assignee & Milestone exemptions
                  exempt-all-pr-assignees: true # Don't mark assigned PRs as stale
                  exempt-all-pr-milestones: true # Don't mark PRs in milestones as stale

                  # 🔍 Draft PR handling
                  exempt-draft-pr: true # Don't mark draft PRs as stale

                  # 📊 Activity detection
                  ignore-updates: false # Consider all updates as activity
                  ignore-issue-updates: false
                  ignore-pr-updates: false

                  # 🎨 Enable debug output for troubleshooting
                  debug-only: false

                  # 🔄 Sort order (oldest first)
                  ascending: true

    maintenance-summary:
        name: 📊 Maintenance Summary
        needs: stale
        if: always()
        runs-on: ubuntu-latest

        permissions:
            issues: read
            pull-requests: read

        steps:
            - name: 📊 Generate maintenance report
              uses: actions/github-script@v7
              with:
                  script: |
                      console.log('🧹 Stale Issues & PRs Cleanup Summary');
                      console.log('=====================================');

                      // Get current stale issues and PRs
                      const { data: staleIssues } = await github.rest.issues.listForRepo({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        labels: 'stale',
                        state: 'open'
                      });

                      const { data: stalePRs } = await github.rest.pulls.list({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        state: 'open'
                      });

                      const stalePRsFiltered = stalePRs.filter(pr => 
                        pr.labels.some(label => label.name === 'stale')
                      );

                      console.log(`📋 Current stale issues: ${staleIssues.length}`);
                      console.log(`🔄 Current stale PRs: ${stalePRsFiltered.length}`);
                      console.log(`⏰ Last run: ${new Date().toISOString()}`);
                      console.log(`🎯 Dry run: ${{ github.event.inputs.dry_run || 'false' }}`);

                      if (staleIssues.length > 0) {
                        console.log('\n📋 Stale Issues:');
                        staleIssues.slice(0, 5).forEach(issue => {
                          console.log(`  - #${issue.number}: ${issue.title}`);
                        });
                        if (staleIssues.length > 5) {
                          console.log(`  ... and ${staleIssues.length - 5} more`);
                        }
                      }

                      if (stalePRsFiltered.length > 0) {
                        console.log('\n🔄 Stale PRs:');
                        stalePRsFiltered.slice(0, 5).forEach(pr => {
                          console.log(`  - #${pr.number}: ${pr.title}`);
                        });
                        if (stalePRsFiltered.length > 5) {
                          console.log(`  ... and ${stalePRsFiltered.length - 5} more`);
                        }
                      }

                      // Health metrics
                      const { data: allIssues } = await github.rest.issues.listForRepo({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        state: 'open',
                        per_page: 100
                      });

                      const totalOpenIssues = allIssues.filter(issue => !issue.pull_request).length;
                      const totalOpenPRs = allIssues.filter(issue => issue.pull_request).length;

                      console.log('\n📈 Repository Health:');
                      console.log(`  📋 Total open issues: ${totalOpenIssues}`);
                      console.log(`  🔄 Total open PRs: ${totalOpenPRs}`);
                      console.log(`  📊 Stale ratio (issues): ${totalOpenIssues > 0 ? ((staleIssues.length / totalOpenIssues) * 100).toFixed(1) : 0}%`);
                      console.log(`  📊 Stale ratio (PRs): ${totalOpenPRs > 0 ? ((stalePRsFiltered.length / totalOpenPRs) * 100).toFixed(1) : 0}%`);

    notify-maintainers:
        name: 📬 Notify Maintainers
        needs: [stale, maintenance-summary]
        if: always() && github.event_name == 'schedule'
        runs-on: ubuntu-latest

        permissions:
            issues: read
            pull-requests: read

        steps:
            - name: 📊 Check if notification needed
              id: check-notification
              uses: actions/github-script@v7
              with:
                  script: |
                      // Get stale items count
                      const { data: staleIssues } = await github.rest.issues.listForRepo({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        labels: 'stale',
                        state: 'open'
                      });

                      const { data: stalePRs } = await github.rest.pulls.list({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        state: 'open'
                      });

                      const stalePRsFiltered = stalePRs.filter(pr => 
                        pr.labels.some(label => label.name === 'stale')
                      );

                      const totalStale = staleIssues.length + stalePRsFiltered.length;

                      // Notify if there are more than 10 stale items
                      const shouldNotify = totalStale > 10;

                      console.log(`Total stale items: ${totalStale}`);
                      console.log(`Should notify: ${shouldNotify}`);

                      core.setOutput('should-notify', shouldNotify);
                      core.setOutput('stale-count', totalStale);
                      core.setOutput('stale-issues', staleIssues.length);
                      core.setOutput('stale-prs', stalePRsFiltered.length);

            - name: 🔔 Create maintenance issue (if needed)
              if: steps.check-notification.outputs.should-notify == 'true'
              uses: actions/github-script@v7
              with:
                  script: |
                      const staleCount = '${{ steps.check-notification.outputs.stale-count }}';
                      const staleIssues = '${{ steps.check-notification.outputs.stale-issues }}';
                      const stalePRs = '${{ steps.check-notification.outputs.stale-prs }}';

                      // Check if maintenance issue already exists
                      const { data: existingIssues } = await github.rest.issues.listForRepo({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        labels: 'maintenance,automated',
                        state: 'open'
                      });

                      const maintenanceIssue = existingIssues.find(issue => 
                        issue.title.includes('Repository Maintenance')
                      );

                      const issueBody = `# 🧹 Repository Maintenance Alert

                      **High number of stale items detected!** 📊

                      ## 📈 Current Status
                      - 📋 **Stale Issues**: ${staleIssues}
                      - 🔄 **Stale PRs**: ${stalePRs}
                      - 📊 **Total Stale**: ${staleCount}

                      ## 🎯 Recommended Actions

                      ### For Issues:
                      - 📖 Review stale issues for relevance
                      - 🏷️ Add appropriate labels to prevent auto-closure
                      - 💬 Engage with issue reporters for updates
                      - 🗑️ Close issues that are no longer relevant

                      ### For Pull Requests:
                      - 🔄 Review PRs for merge readiness
                      - 💬 Request updates from contributors
                      - 🔧 Help contributors resolve conflicts
                      - 🗑️ Close PRs that are no longer needed

                      ## 🤖 Automation Details

                      The stale workflow runs daily and:
                      - Marks items stale after 60 days (issues) / 30 days (PRs) of inactivity
                      - Closes items after 14 days (issues) / 7 days (PRs) of being stale
                      - Exempts labeled, assigned, or milestone items

                      ## 📅 Next Steps

                      - [ ] Review and triage stale issues
                      - [ ] Review and merge/close stale PRs  
                      - [ ] Update exempt labels if needed
                      - [ ] Consider adjusting stale thresholds

                      ---

                      🤖 *This issue was automatically created by the stale workflow on ${new Date().toISOString().split('T')[0]}*

                      📊 [View Stale Items](https://github.com/${context.repo.owner}/${context.repo.repo}/issues?q=is%3Aopen+label%3Astale)`;

                      if (maintenanceIssue) {
                        // Update existing issue
                        await github.rest.issues.update({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: maintenanceIssue.number,
                          body: issueBody
                        });
                        
                        console.log(`Updated maintenance issue #${maintenanceIssue.number}`);
                      } else {
                        // Create new issue
                        const newIssue = await github.rest.issues.create({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          title: '🧹 Repository Maintenance - High Stale Count',
                          body: issueBody,
                          labels: ['maintenance', 'automated', 'priority-medium']
                        });
                        
                        console.log(`Created maintenance issue #${newIssue.data.number}`);
                      }
