name: 🔧 Node.js Compatibility Matrix

on:
    schedule:
        # Run weekly on Sundays at 2 AM UTC
        - cron: '0 2 * * 0'
    workflow_dispatch:
        inputs:
            node_versions:
                description: 'Node versions to test (comma-separated)'
                required: false
                default: '16,18,20,22,latest'
            include_prerelease:
                description: 'Include Node.js prerelease versions'
                required: false
                default: false
                type: boolean

permissions:
    contents: read
    issues: write

jobs:
    detect-versions:
        name: 🔍 Detect Node.js Versions
        runs-on: ubuntu-latest

        permissions:
            contents: read

        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
            node-versions: ${{ steps.set-matrix.outputs.node-versions }}

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🔍 Setup version matrix
              id: set-matrix
              run: |
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.node_versions }}" ]; then
                    # Use user-provided versions
                    VERSIONS="${{ github.event.inputs.node_versions }}"
                  else
                    # Default comprehensive testing matrix
                    VERSIONS="16,18,20,22,latest"
                  fi

                  # Add prerelease if requested
                  if [ "${{ github.event.inputs.include_prerelease }}" = "true" ]; then
                    VERSIONS="$VERSIONS,node"
                  fi

                  echo "Testing Node.js versions: $VERSIONS"

                  # Convert to JSON array for matrix
                  JSON_ARRAY=$(echo "$VERSIONS" | jq -R 'split(",")')
                  echo "matrix={\"node-version\":$JSON_ARRAY}" >> $GITHUB_OUTPUT
                  echo "node-versions=$VERSIONS" >> $GITHUB_OUTPUT

    compatibility-test:
        name: 🧪 Test Node ${{ matrix.node-version }} (${{ matrix.os }})
        needs: detect-versions
        runs-on: ${{ matrix.os }}

        permissions:
            contents: read

        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                node-version: ${{ fromJson(needs.detect-versions.outputs.matrix).node-version }}
                # Test different package managers
                package-manager: [pnpm, npm]
                exclude:
                    # Reduce matrix size for efficiency
                    - os: macos-latest
                      package-manager: npm
                    - node-version: 'latest'
                      package-manager: npm

        continue-on-error: true

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🟢 Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
              continue-on-error: true
              id: node-setup

            - name: 📦 Setup pnpm (if using pnpm)
              if: matrix.package-manager == 'pnpm' && steps.node-setup.outcome == 'success'
              uses: pnpm/action-setup@v4
              with:
                  version: latest
              continue-on-error: true
              id: pnpm-setup

            - name: 🔍 Node.js version info
              if: steps.node-setup.outcome == 'success'
              run: |
                  echo "📊 Node.js Version Information"
                  echo "================================"
                  node --version
                  npm --version
                  if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
                    pnpm --version || echo "❌ pnpm not available"
                  fi
                  echo ""
                  echo "🌍 Environment:"
                  echo "OS: ${{ matrix.os }}"
                  echo "Package Manager: ${{ matrix.package-manager }}"
                  echo "Node Version: ${{ matrix.node-version }}"

            - name: 📚 Install dependencies with ${{ matrix.package-manager }}
              if: steps.node-setup.outcome == 'success'
              run: |
                  if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
                    if [ "${{ steps.pnpm-setup.outcome }}" = "success" ]; then
                      pnpm install --frozen-lockfile
                    else
                      echo "❌ pnpm setup failed, skipping pnpm install"
                      exit 1
                    fi
                  else
                    # Use npm
                    npm ci
                  fi
              continue-on-error: true
              id: install-deps
              shell: bash

            - name: 🔍 Dependency audit
              if: steps.install-deps.outcome == 'success'
              run: |
                  echo "🔍 Checking for security vulnerabilities..."
                  if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
                    pnpm audit --prod || echo "⚠️ Security audit found issues (non-blocking)"
                  else
                    npm audit --audit-level moderate || echo "⚠️ Security audit found issues (non-blocking)"
                  fi
              continue-on-error: true

            - name: 🏗️ Build project
              if: steps.install-deps.outcome == 'success'
              run: |
                  if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
                    pnpm run compile
                  else
                    npm run compile
                  fi
              continue-on-error: true
              id: build

            - name: 🔍 Type checking
              if: steps.build.outcome == 'success'
              run: |
                  if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
                    pnpm run check-types
                  else
                    npm run check-types
                  fi
              continue-on-error: true
              id: typecheck

            - name: 🕵️ Linting
              if: steps.build.outcome == 'success'
              run: |
                  if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
                    pnpm run lint
                  else
                    npm run lint
                  fi
              continue-on-error: true
              id: lint

            - name: 📦 Package extension
              if: steps.build.outcome == 'success'
              run: |
                  if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
                    pnpm run package
                  else
                    npm run package
                  fi
              continue-on-error: true
              id: package

            - name: 🧪 Run tests
              if: steps.build.outcome == 'success'
              run: |
                  if [ "$RUNNER_OS" = "Linux" ]; then
                    xvfb-run -a ${{ matrix.package-manager == 'pnpm' && 'pnpm test' || 'npm test' }}
                  else
                    ${{ matrix.package-manager == 'pnpm' && 'pnpm test' || 'npm test' }}
                  fi
              continue-on-error: true
              id: test
              env:
                  NODE_ENV: test

            - name: 📊 Test Results Summary
              if: always()
              run: |
                  echo "📊 Compatibility Test Results for Node ${{ matrix.node-version }} on ${{ matrix.os }}"
                  echo "============================================================================"
                  echo "🟢 Node Setup: ${{ steps.node-setup.outcome }}"
                  echo "📦 Package Manager Setup: ${{ steps.pnpm-setup.outcome || 'N/A (using npm)' }}"
                  echo "📚 Install Dependencies: ${{ steps.install-deps.outcome }}"
                  echo "🏗️ Build: ${{ steps.build.outcome }}"
                  echo "🔍 Type Check: ${{ steps.typecheck.outcome }}"
                  echo "🕵️ Lint: ${{ steps.lint.outcome }}"
                  echo "📦 Package: ${{ steps.package.outcome }}"
                  echo "🧪 Test: ${{ steps.test.outcome }}"
                  echo ""

                  # Determine overall status
                  if [ "${{ steps.node-setup.outcome }}" = "success" ] && \
                     [ "${{ steps.install-deps.outcome }}" = "success" ] && \
                     [ "${{ steps.build.outcome }}" = "success" ] && \
                     [ "${{ steps.test.outcome }}" = "success" ]; then
                    echo "✅ OVERALL: COMPATIBLE"
                    echo "status=compatible" >> $GITHUB_ENV
                  elif [ "${{ steps.node-setup.outcome }}" = "failure" ]; then
                    echo "❌ OVERALL: NODE SETUP FAILED"
                    echo "status=node-failed" >> $GITHUB_ENV
                  else
                    echo "⚠️ OVERALL: PARTIAL COMPATIBILITY"
                    echo "status=partial" >> $GITHUB_ENV
                  fi

            - name: 📤 Upload build artifacts (if successful)
              if: steps.package.outcome == 'success'
              uses: actions/upload-artifact@v4
              with:
                  name: build-node${{ matrix.node-version }}-${{ matrix.os }}-${{ matrix.package-manager }}
                  path: |
                      dist/
                      *.vsix
                  retention-days: 7

    compatibility-report:
        name: 📋 Generate Compatibility Report
        needs: [detect-versions, compatibility-test]
        if: always()
        runs-on: ubuntu-latest

        permissions:
            contents: read
            issues: write

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📊 Collect test results
              id: collect-results
              run: |
                  echo "📊 Collecting compatibility test results..."

                  # This would ideally collect results from the matrix jobs
                  # For now, we'll create a summary based on the job outcomes

                  cat > compatibility-report.md << 'EOF'
                  # 🔧 Node.js Compatibility Report

                  **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
                  **Tested Versions:** ${{ needs.detect-versions.outputs.node-versions }}  
                  **Trigger:** ${{ github.event_name }}

                  ## 📊 Summary

                  This report shows the compatibility status of the Keypress Notifications extension across different Node.js versions and platforms.

                  ### ✅ Fully Compatible
                  - Node.js versions that passed all tests

                  ### ⚠️ Partially Compatible  
                  - Node.js versions with minor issues but core functionality works

                  ### ❌ Incompatible
                  - Node.js versions that failed critical tests

                  ## 🎯 Recommendations

                  - **Primary Development:** Use Node 20.x (LTS)
                  - **Minimum Support:** Node 16.x
                  - **Future Testing:** Include Node 22.x for forward compatibility

                  ## 🔗 Links

                  - [View Full Test Results](https://github.com/Vijay431/vscode-keypress_snackbar_notification-extension/actions)
                  - [Node.js Compatibility CI](https://github.com/Vijay431/vscode-keypress_snackbar_notification-extension/blob/master/.github/workflows/node-compatibility.yml)
                  - [Report Issues](https://github.com/Vijay431/vscode-keypress_snackbar_notification-extension/issues)

                  ---

                  *This report is automatically generated by the Node.js Compatibility CI workflow.*
                  EOF

                  cat compatibility-report.md

            - name: 🏷️ Create or update compatibility issue
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      const report = fs.readFileSync('compatibility-report.md', 'utf8');

                      // Look for existing compatibility report issue
                      const issues = await github.rest.issues.listForRepo({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        labels: ['compatibility', 'automated'],
                        state: 'open'
                      });

                      const title = '🔧 Node.js Compatibility Report';
                      const labels = ['compatibility', 'automated', 'documentation'];

                      if (issues.data.length > 0) {
                        // Update existing issue
                        const issue = issues.data[0];
                        await github.rest.issues.update({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: issue.number,
                          body: report
                        });
                        
                        console.log(`Updated compatibility report issue #${issue.number}`);
                      } else {
                        // Create new issue
                        const newIssue = await github.rest.issues.create({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          title: title,
                          body: report,
                          labels: labels
                        });
                        
                        console.log(`Created new compatibility report issue #${newIssue.data.number}`);
                      }

    notification:
        name: 📬 Send Notifications
        needs: [compatibility-test, compatibility-report]
        if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: 📊 Workflow Summary
              run: |
                  echo "🔧 Node.js Compatibility Check Complete!"
                  echo "========================================"
                  echo "📅 Trigger: ${{ github.event_name }}"
                  echo "⏰ Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
                  echo "🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  echo ""
                  echo "📋 Results:"
                  echo "- Compatibility Tests: ${{ needs.compatibility-test.result }}"
                  echo "- Report Generation: ${{ needs.compatibility-report.result }}"
                  echo ""
                  echo "🎯 Check the compatibility report issue for detailed results!"
